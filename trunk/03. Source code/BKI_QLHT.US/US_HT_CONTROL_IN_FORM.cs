///************************************************
/// Generated by: TuDM
/// Date: 09/04/2014 05:33:05
/// Goal: Create User Service Class for HT_CONTROL_IN_FORM
///************************************************
/// <summary>
/// Create User Service Class for HT_CONTROL_IN_FORM
/// </summary>

using System;
using BKI_QLHT.DS;
using IP.Core.IPCommon;
using IP.Core.IPUserService;
using System.Data.SqlClient;
using System.Data;
using BKI_QLHT.DS;


namespace BKI_QLHT.US
{

    public class US_HT_CONTROL_IN_FORM : US_Object
    {
        private const string c_TableName = "HT_CONTROL_IN_FORM";
        #region "Public Properties"
        public decimal dcID
        {
            get
            {
                return CNull.RowNVLDecimal(pm_objDR, "ID", IPConstants.c_DefaultDecimal);
            }
            set
            {
                pm_objDR["ID"] = value;
            }
        }

        public bool IsIDNull()
        {
            return pm_objDR.IsNull("ID");
        }

        public void SetIDNull()
        {
            pm_objDR["ID"] = System.Convert.DBNull;
        }

        public decimal dcID_FORM
        {
            get
            {
                return CNull.RowNVLDecimal(pm_objDR, "ID_FORM", IPConstants.c_DefaultDecimal);
            }
            set
            {
                pm_objDR["ID_FORM"] = value;
            }
        }

        public bool IsID_FORMNull()
        {
            return pm_objDR.IsNull("ID_FORM");
        }

        public void SetID_FORMNull()
        {
            pm_objDR["ID_FORM"] = System.Convert.DBNull;
        }

        public string strCONTROL_NAME
        {
            get
            {
                return CNull.RowNVLString(pm_objDR, "CONTROL_NAME", IPConstants.c_DefaultString);
            }
            set
            {
                pm_objDR["CONTROL_NAME"] = value;
            }
        }

        public bool IsCONTROL_NAMENull()
        {
            return pm_objDR.IsNull("CONTROL_NAME");
        }

        public void SetCONTROL_NAMENull()
        {
            pm_objDR["CONTROL_NAME"] = System.Convert.DBNull;
        }

        public string strCONTROL_TYPE
        {
            get
            {
                return CNull.RowNVLString(pm_objDR, "CONTROL_TYPE", IPConstants.c_DefaultString);
            }
            set
            {
                pm_objDR["CONTROL_TYPE"] = value;
            }
        }

        public bool IsCONTROL_TYPENull()
        {
            return pm_objDR.IsNull("CONTROL_TYPE");
        }

        public void SetCONTROL_TYPENull()
        {
            pm_objDR["CONTROL_TYPE"] = System.Convert.DBNull;
        }

        public decimal dcID_CHUC_NANG
        {
            get
            {
                return CNull.RowNVLDecimal(pm_objDR, "ID_CHUC_NANG", IPConstants.c_DefaultDecimal);
            }
            set
            {
                pm_objDR["ID_CHUC_NANG"] = value;
            }
        }

        public bool IsID_CHUC_NANGNull()
        {
            return pm_objDR.IsNull("ID_CHUC_NANG");
        }

        public void SetID_CHUC_NANGNull()
        {
            pm_objDR["ID_CHUC_NANG"] = System.Convert.DBNull;
        }

        #endregion
        #region "Init Functions"
        public US_HT_CONTROL_IN_FORM()
        {
            pm_objDS = new DS_HT_CONTROL_IN_FORM();
            pm_strTableName = c_TableName;
            pm_objDR = pm_objDS.Tables[pm_strTableName].NewRow();
        }

        public US_HT_CONTROL_IN_FORM(DataRow i_objDR)
            : this()
        {
            this.DataRow2Me(i_objDR);
        }

        public US_HT_CONTROL_IN_FORM(decimal i_dbID)
        {
            pm_objDS = new DS_HT_CONTROL_IN_FORM();
            pm_strTableName = c_TableName;
            IMakeSelectCmd v_objMkCmd = new CMakeAndSelectCmd(pm_objDS, c_TableName);
            v_objMkCmd.AddCondition("ID", i_dbID, eKieuDuLieu.KieuNumber, eKieuSoSanh.Bang);
            SqlCommand v_cmdSQL;
            v_cmdSQL = v_objMkCmd.getSelectCmd();
            this.FillDatasetByCommand(pm_objDS, v_cmdSQL);
            pm_objDR = getRowClone(pm_objDS.Tables[pm_strTableName].Rows[0]);
        }
        #endregion
    }
}
